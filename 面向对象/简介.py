'''
类简单的使用情况就是使用类作为命名空间，
在类外加进去的属性属于类实例的属性，
并不是类的属性，这些属性实质上是动态的，不需要再其他地方声明

类通常在一个模块的顶层进行定义，以便类实例能够
在类所定义的源代码文件中的任何地方背创建

类属性
属性就是属于一个对象的数据或者函数元素，包括数据属性和函数属性，
即数据和函数都属于属性的范畴

1. 实例数据属性

2. 类数据属性: 仅当需要有更加 “静态” 数据类型 时才变得有用，
它和任何实例都无关，它相当于 java中 的静态变量，
class A(object):
    foo = 100
    print (foo)
3. 方法
类中的方法必须通过类实例的点调用来访问，即方法必须绑定（到一个实例）
才能直接被调用
  class MyClass(object):
      def my():
          print ("my")
   mc=MyClass()
   mc.my()

4 查看类的属性
两种方法，使用内建函数 dir（） 或者是查看类的特殊属性 __dict__.dir()
返回的是所有的类属性的一个名字列表，而 __dict__ 返回的是一个字典，
键是属性名，值是属性数据

dir(myclass)
myclass.dit

5. 类的特殊属性：
__name__  __doc__ __bases__  __module__ __dict__ __class__ 是所有类都具备的特殊类属性

__dict__ :
属性包含一个字典，由类的数据属性组成。
访问一个类属性的时候，Python 解释器将会搜索字典以得到需要的属性。
如果在 __dict__ 中没有找到，将会在基类的字典中进行搜索，采用 “深度优先搜索” 顺序

__module__:
这个属性说明了这个类是位于哪个模块中的，python 支持模块间的类继承，

myclass.__module__
'__main__'

说明Myclass 这个类是在 __main__ 模块中的，如果将这个类定义到别的模块中，
那么 __module__ 存储的就是这个类所在的模块


实例属性 和 类属性

类属性包括两种： 数据属性 和方法属性

实例实现只包括数据属性， 方法属性是属于类属性中的，
实例属性的数据属性也包括两种： 雷属性中的数据属性和自定义的数据属性

实例仅拥有数据属性 （方法严格来说是类属性），实例的数据属性只是与某个类的实例
相关联的数据值，并且可以通过句点属性标识法来访问。这些值独立与其它实例或类。
当一个实例被释放后，它的属性同时也被清除

python 能够在 “运行时”  创建实例属性， 构造器 __init()__ 是设置这些属性的关键点之一

动态的只是数据属性，方法属性还是用的类中的方法属性，， 这也是类和实例唯一有关的地方

__init__() 方法是初始化实例的，所以将实例属性放到这个地方来进行初始化，是最适合不过的。
同时可以在 __init__() 方法中传入默认的参数，那么在实例化类时，就可以不传递这些参数，而试用默认的值了。

实例的dir() 和 __dict__ 的区别
__dict__ 只显示实例属性，即只显示实例的数据属性，
而 dir()  显示类属性和实例属性
即显示实例所 属类中的数据属性和方法属性，也显示实例中的数据属性

内建类型：

内建类型也属于类，也有属性，不过内建类的实例没有 __dict__ 属性，内建类就是 complex,int,float 等

类属性和实例属性的区别：

类属性说的是类内定义的数据属性（静态） 和方法，而实例属性只包括“动态“ 添加到实例中的数据属性
类属性仅是与类相关的数据值，和实例属性不同，类属性和实例无关
类和实例都是名字空间。类是类属性的名字空间，实例则是实例属性的
属性可通过类或实例来访问，类属性就好像Java中的静态成员变量


绑定和方法调用：
方法仅仅是类内部定义的函数。（这意味着方法是类属性而不是实例属性）
方法只有在其所属的类用有实例时，才能被调用。。。。。。

静态方法和类方法：


继承
一个子类可以继承它的基类的任何属性，不管时数据属性还是方法
文档字符串对类，函数/方法 ，还有模块来说都是唯一的，所以特殊属性 __doc__ 不会从基类中继承过来

__init__

input()
raw_input() 区别：



























'''

